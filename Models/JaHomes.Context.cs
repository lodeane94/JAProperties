

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace SS.Models
{

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;

using System.Data.Entity.Core.Objects;
using System.Linq;


public partial class JAHomesEntities : DbContext
{
    public JAHomesEntities()
        : base("name=JAHomesEntities")
    {

    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }


    public virtual DbSet<ACCOMMODATIONS> ACCOMMODATIONS { get; set; }

    public virtual DbSet<aspnet_Users> aspnet_Users { get; set; }

    public virtual DbSet<aspnet_UsersInRoles> aspnet_UsersInRoles { get; set; }

    public virtual DbSet<BILLS> BILLS { get; set; }

    public virtual DbSet<COMPLAINTS> COMPLAINTS { get; set; }

    public virtual DbSet<HOUSE> HOUSE { get; set; }

    public virtual DbSet<MEETINGS> MEETINGS { get; set; }

    public virtual DbSet<MESSAGES> MESSAGES { get; set; }

    public virtual DbSet<REQUISITION_PROPERTY_MAPPINGS> REQUISITION_PROPERTY_MAPPINGS { get; set; }

    public virtual DbSet<REQUISITIONS> REQUISITIONS { get; set; }

    public virtual DbSet<SUBSCRIPTIONS> SUBSCRIPTIONS { get; set; }

    public virtual DbSet<TENNANTS> TENNANTS { get; set; }

    public virtual DbSet<LAND> LAND { get; set; }

    public virtual DbSet<LANDLORDS> LANDLORDS { get; set; }


    public virtual ObjectResult<sp_get_properties_Result> sp_get_properties(string table_name, Nullable<short> fetch_amount, string filter_string, ObjectParameter rowcount)
    {

        var table_nameParameter = table_name != null ?
            new ObjectParameter("table_name", table_name) :
            new ObjectParameter("table_name", typeof(string));


        var fetch_amountParameter = fetch_amount.HasValue ?
            new ObjectParameter("fetch_amount", fetch_amount) :
            new ObjectParameter("fetch_amount", typeof(short));


        var filter_stringParameter = filter_string != null ?
            new ObjectParameter("filter_string", filter_string) :
            new ObjectParameter("filter_string", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_get_properties_Result>("sp_get_properties", table_nameParameter, fetch_amountParameter, filter_stringParameter, rowcount);
    }


    public virtual ObjectResult<sp_get_requisitions_Result> sp_get_requisitions(string eMAIL)
    {

        var eMAILParameter = eMAIL != null ?
            new ObjectParameter("EMAIL", eMAIL) :
            new ObjectParameter("EMAIL", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_get_requisitions_Result>("sp_get_requisitions", eMAILParameter);
    }


    public virtual ObjectResult<sp_get_tennants_partial_info_Result> sp_get_tennants_partial_info(Nullable<System.Guid> landlord_id)
    {

        var landlord_idParameter = landlord_id.HasValue ?
            new ObjectParameter("landlord_id", landlord_id) :
            new ObjectParameter("landlord_id", typeof(System.Guid));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_get_tennants_partial_info_Result>("sp_get_tennants_partial_info", landlord_idParameter);
    }


    public virtual int sp_insert_accommodation(string street_address, string city, string parish, string latitude, string longitude, Nullable<decimal> price, Nullable<decimal> security_deposit, Nullable<short> occupancy, string gender_preference, string description, Nullable<bool> water, Nullable<bool> electricity, Nullable<bool> cable, Nullable<bool> gas, Nullable<bool> internet, Nullable<bool> availability, string enrolment_key, string image_url, string terms_agreement, Nullable<System.Guid> owner, Nullable<bool> is_student_acc, Nullable<short> house_bathroom_amount)
    {

        var street_addressParameter = street_address != null ?
            new ObjectParameter("street_address", street_address) :
            new ObjectParameter("street_address", typeof(string));


        var cityParameter = city != null ?
            new ObjectParameter("city", city) :
            new ObjectParameter("city", typeof(string));


        var parishParameter = parish != null ?
            new ObjectParameter("parish", parish) :
            new ObjectParameter("parish", typeof(string));


        var latitudeParameter = latitude != null ?
            new ObjectParameter("latitude", latitude) :
            new ObjectParameter("latitude", typeof(string));


        var longitudeParameter = longitude != null ?
            new ObjectParameter("longitude", longitude) :
            new ObjectParameter("longitude", typeof(string));


        var priceParameter = price.HasValue ?
            new ObjectParameter("price", price) :
            new ObjectParameter("price", typeof(decimal));


        var security_depositParameter = security_deposit.HasValue ?
            new ObjectParameter("security_deposit", security_deposit) :
            new ObjectParameter("security_deposit", typeof(decimal));


        var occupancyParameter = occupancy.HasValue ?
            new ObjectParameter("occupancy", occupancy) :
            new ObjectParameter("occupancy", typeof(short));


        var gender_preferenceParameter = gender_preference != null ?
            new ObjectParameter("gender_preference", gender_preference) :
            new ObjectParameter("gender_preference", typeof(string));


        var descriptionParameter = description != null ?
            new ObjectParameter("description", description) :
            new ObjectParameter("description", typeof(string));


        var waterParameter = water.HasValue ?
            new ObjectParameter("water", water) :
            new ObjectParameter("water", typeof(bool));


        var electricityParameter = electricity.HasValue ?
            new ObjectParameter("electricity", electricity) :
            new ObjectParameter("electricity", typeof(bool));


        var cableParameter = cable.HasValue ?
            new ObjectParameter("cable", cable) :
            new ObjectParameter("cable", typeof(bool));


        var gasParameter = gas.HasValue ?
            new ObjectParameter("gas", gas) :
            new ObjectParameter("gas", typeof(bool));


        var internetParameter = internet.HasValue ?
            new ObjectParameter("internet", internet) :
            new ObjectParameter("internet", typeof(bool));


        var availabilityParameter = availability.HasValue ?
            new ObjectParameter("availability", availability) :
            new ObjectParameter("availability", typeof(bool));


        var enrolment_keyParameter = enrolment_key != null ?
            new ObjectParameter("enrolment_key", enrolment_key) :
            new ObjectParameter("enrolment_key", typeof(string));


        var image_urlParameter = image_url != null ?
            new ObjectParameter("image_url", image_url) :
            new ObjectParameter("image_url", typeof(string));


        var terms_agreementParameter = terms_agreement != null ?
            new ObjectParameter("terms_agreement", terms_agreement) :
            new ObjectParameter("terms_agreement", typeof(string));


        var ownerParameter = owner.HasValue ?
            new ObjectParameter("owner", owner) :
            new ObjectParameter("owner", typeof(System.Guid));


        var is_student_accParameter = is_student_acc.HasValue ?
            new ObjectParameter("is_student_acc", is_student_acc) :
            new ObjectParameter("is_student_acc", typeof(bool));


        var house_bathroom_amountParameter = house_bathroom_amount.HasValue ?
            new ObjectParameter("house_bathroom_amount", house_bathroom_amount) :
            new ObjectParameter("house_bathroom_amount", typeof(short));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_accommodation", street_addressParameter, cityParameter, parishParameter, latitudeParameter, longitudeParameter, priceParameter, security_depositParameter, occupancyParameter, gender_preferenceParameter, descriptionParameter, waterParameter, electricityParameter, cableParameter, gasParameter, internetParameter, availabilityParameter, enrolment_keyParameter, image_urlParameter, terms_agreementParameter, ownerParameter, is_student_accParameter, house_bathroom_amountParameter);
    }


    public virtual int sp_insert_bill(string b_type, Nullable<decimal> b_amount, string description, Nullable<System.DateTime> date_issued, Nullable<System.DateTime> date_due, Nullable<System.Guid> accommodation_id)
    {

        var b_typeParameter = b_type != null ?
            new ObjectParameter("b_type", b_type) :
            new ObjectParameter("b_type", typeof(string));


        var b_amountParameter = b_amount.HasValue ?
            new ObjectParameter("b_amount", b_amount) :
            new ObjectParameter("b_amount", typeof(decimal));


        var descriptionParameter = description != null ?
            new ObjectParameter("description", description) :
            new ObjectParameter("description", typeof(string));


        var date_issuedParameter = date_issued.HasValue ?
            new ObjectParameter("date_issued", date_issued) :
            new ObjectParameter("date_issued", typeof(System.DateTime));


        var date_dueParameter = date_due.HasValue ?
            new ObjectParameter("date_due", date_due) :
            new ObjectParameter("date_due", typeof(System.DateTime));


        var accommodation_idParameter = accommodation_id.HasValue ?
            new ObjectParameter("accommodation_id", accommodation_id) :
            new ObjectParameter("accommodation_id", typeof(System.Guid));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_bill", b_typeParameter, b_amountParameter, descriptionParameter, date_issuedParameter, date_dueParameter, accommodation_idParameter);
    }


    public virtual int sp_insert_house(string street_address, string city, string parish, Nullable<decimal> price, string bed_room_amount, string living_room_amount, string bath_room_amount, string purpose, Nullable<bool> is_furnished, string description, string image_url, Nullable<System.Guid> owner)
    {

        var street_addressParameter = street_address != null ?
            new ObjectParameter("street_address", street_address) :
            new ObjectParameter("street_address", typeof(string));


        var cityParameter = city != null ?
            new ObjectParameter("city", city) :
            new ObjectParameter("city", typeof(string));


        var parishParameter = parish != null ?
            new ObjectParameter("parish", parish) :
            new ObjectParameter("parish", typeof(string));


        var priceParameter = price.HasValue ?
            new ObjectParameter("price", price) :
            new ObjectParameter("price", typeof(decimal));


        var bed_room_amountParameter = bed_room_amount != null ?
            new ObjectParameter("bed_room_amount", bed_room_amount) :
            new ObjectParameter("bed_room_amount", typeof(string));


        var living_room_amountParameter = living_room_amount != null ?
            new ObjectParameter("living_room_amount", living_room_amount) :
            new ObjectParameter("living_room_amount", typeof(string));


        var bath_room_amountParameter = bath_room_amount != null ?
            new ObjectParameter("bath_room_amount", bath_room_amount) :
            new ObjectParameter("bath_room_amount", typeof(string));


        var purposeParameter = purpose != null ?
            new ObjectParameter("purpose", purpose) :
            new ObjectParameter("purpose", typeof(string));


        var is_furnishedParameter = is_furnished.HasValue ?
            new ObjectParameter("is_furnished", is_furnished) :
            new ObjectParameter("is_furnished", typeof(bool));


        var descriptionParameter = description != null ?
            new ObjectParameter("description", description) :
            new ObjectParameter("description", typeof(string));


        var image_urlParameter = image_url != null ?
            new ObjectParameter("image_url", image_url) :
            new ObjectParameter("image_url", typeof(string));


        var ownerParameter = owner.HasValue ?
            new ObjectParameter("owner", owner) :
            new ObjectParameter("owner", typeof(System.Guid));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_house", street_addressParameter, cityParameter, parishParameter, priceParameter, bed_room_amountParameter, living_room_amountParameter, bath_room_amountParameter, purposeParameter, is_furnishedParameter, descriptionParameter, image_urlParameter, ownerParameter);
    }


    public virtual int sp_insert_land(string street_address, string city, string parish, string purpose, Nullable<decimal> price, string area, string description, string image_url, Nullable<System.Guid> owner)
    {

        var street_addressParameter = street_address != null ?
            new ObjectParameter("street_address", street_address) :
            new ObjectParameter("street_address", typeof(string));


        var cityParameter = city != null ?
            new ObjectParameter("city", city) :
            new ObjectParameter("city", typeof(string));


        var parishParameter = parish != null ?
            new ObjectParameter("parish", parish) :
            new ObjectParameter("parish", typeof(string));


        var purposeParameter = purpose != null ?
            new ObjectParameter("purpose", purpose) :
            new ObjectParameter("purpose", typeof(string));


        var priceParameter = price.HasValue ?
            new ObjectParameter("price", price) :
            new ObjectParameter("price", typeof(decimal));


        var areaParameter = area != null ?
            new ObjectParameter("area", area) :
            new ObjectParameter("area", typeof(string));


        var descriptionParameter = description != null ?
            new ObjectParameter("description", description) :
            new ObjectParameter("description", typeof(string));


        var image_urlParameter = image_url != null ?
            new ObjectParameter("image_url", image_url) :
            new ObjectParameter("image_url", typeof(string));


        var ownerParameter = owner.HasValue ?
            new ObjectParameter("owner", owner) :
            new ObjectParameter("owner", typeof(System.Guid));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_land", street_addressParameter, cityParameter, parishParameter, purposeParameter, priceParameter, areaParameter, descriptionParameter, image_urlParameter, ownerParameter);
    }


    public virtual int sp_insert_landlord(string first_name, string middle_name, string last_name, string gender, string cell, string email, string picture_url, string username)
    {

        var first_nameParameter = first_name != null ?
            new ObjectParameter("first_name", first_name) :
            new ObjectParameter("first_name", typeof(string));


        var middle_nameParameter = middle_name != null ?
            new ObjectParameter("middle_name", middle_name) :
            new ObjectParameter("middle_name", typeof(string));


        var last_nameParameter = last_name != null ?
            new ObjectParameter("last_name", last_name) :
            new ObjectParameter("last_name", typeof(string));


        var genderParameter = gender != null ?
            new ObjectParameter("gender", gender) :
            new ObjectParameter("gender", typeof(string));


        var cellParameter = cell != null ?
            new ObjectParameter("cell", cell) :
            new ObjectParameter("cell", typeof(string));


        var emailParameter = email != null ?
            new ObjectParameter("email", email) :
            new ObjectParameter("email", typeof(string));


        var picture_urlParameter = picture_url != null ?
            new ObjectParameter("picture_url", picture_url) :
            new ObjectParameter("picture_url", typeof(string));


        var usernameParameter = username != null ?
            new ObjectParameter("username", username) :
            new ObjectParameter("username", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_landlord", first_nameParameter, middle_nameParameter, last_nameParameter, genderParameter, cellParameter, emailParameter, picture_urlParameter, usernameParameter);
    }


    public virtual int sp_insert_tennants(string accommodation_id, string first_name, string last_name, string gender, Nullable<System.DateTime> dob, string street_address, string city, string parish, string cell, string email, string university, string programme_name, Nullable<System.DateTime> programme_start_date, Nullable<System.DateTime> programme_end_date, Nullable<short> settlement_period, string description)
    {

        var accommodation_idParameter = accommodation_id != null ?
            new ObjectParameter("accommodation_id", accommodation_id) :
            new ObjectParameter("accommodation_id", typeof(string));


        var first_nameParameter = first_name != null ?
            new ObjectParameter("first_name", first_name) :
            new ObjectParameter("first_name", typeof(string));


        var last_nameParameter = last_name != null ?
            new ObjectParameter("last_name", last_name) :
            new ObjectParameter("last_name", typeof(string));


        var genderParameter = gender != null ?
            new ObjectParameter("gender", gender) :
            new ObjectParameter("gender", typeof(string));


        var dobParameter = dob.HasValue ?
            new ObjectParameter("dob", dob) :
            new ObjectParameter("dob", typeof(System.DateTime));


        var street_addressParameter = street_address != null ?
            new ObjectParameter("street_address", street_address) :
            new ObjectParameter("street_address", typeof(string));


        var cityParameter = city != null ?
            new ObjectParameter("city", city) :
            new ObjectParameter("city", typeof(string));


        var parishParameter = parish != null ?
            new ObjectParameter("parish", parish) :
            new ObjectParameter("parish", typeof(string));


        var cellParameter = cell != null ?
            new ObjectParameter("cell", cell) :
            new ObjectParameter("cell", typeof(string));


        var emailParameter = email != null ?
            new ObjectParameter("email", email) :
            new ObjectParameter("email", typeof(string));


        var universityParameter = university != null ?
            new ObjectParameter("university", university) :
            new ObjectParameter("university", typeof(string));


        var programme_nameParameter = programme_name != null ?
            new ObjectParameter("programme_name", programme_name) :
            new ObjectParameter("programme_name", typeof(string));


        var programme_start_dateParameter = programme_start_date.HasValue ?
            new ObjectParameter("programme_start_date", programme_start_date) :
            new ObjectParameter("programme_start_date", typeof(System.DateTime));


        var programme_end_dateParameter = programme_end_date.HasValue ?
            new ObjectParameter("programme_end_date", programme_end_date) :
            new ObjectParameter("programme_end_date", typeof(System.DateTime));


        var settlement_periodParameter = settlement_period.HasValue ?
            new ObjectParameter("settlement_period", settlement_period) :
            new ObjectParameter("settlement_period", typeof(short));


        var descriptionParameter = description != null ?
            new ObjectParameter("description", description) :
            new ObjectParameter("description", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_tennants", accommodation_idParameter, first_nameParameter, last_nameParameter, genderParameter, dobParameter, street_addressParameter, cityParameter, parishParameter, cellParameter, emailParameter, universityParameter, programme_nameParameter, programme_start_dateParameter, programme_end_dateParameter, settlement_periodParameter, descriptionParameter);
    }


    public virtual int sp_make_requisition(Nullable<System.Guid> property_id, string first_name, string last_name, string gender, string email, string cell)
    {

        var property_idParameter = property_id.HasValue ?
            new ObjectParameter("property_id", property_id) :
            new ObjectParameter("property_id", typeof(System.Guid));


        var first_nameParameter = first_name != null ?
            new ObjectParameter("first_name", first_name) :
            new ObjectParameter("first_name", typeof(string));


        var last_nameParameter = last_name != null ?
            new ObjectParameter("last_name", last_name) :
            new ObjectParameter("last_name", typeof(string));


        var genderParameter = gender != null ?
            new ObjectParameter("gender", gender) :
            new ObjectParameter("gender", typeof(string));


        var emailParameter = email != null ?
            new ObjectParameter("email", email) :
            new ObjectParameter("email", typeof(string));


        var cellParameter = cell != null ?
            new ObjectParameter("cell", cell) :
            new ObjectParameter("cell", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_make_requisition", property_idParameter, first_nameParameter, last_nameParameter, genderParameter, emailParameter, cellParameter);
    }


    public virtual ObjectResult<sp_pagination_Result> sp_pagination(string table_name, Nullable<short> pageNumber, Nullable<short> fetch_amount, string filter_string)
    {

        var table_nameParameter = table_name != null ?
            new ObjectParameter("table_name", table_name) :
            new ObjectParameter("table_name", typeof(string));


        var pageNumberParameter = pageNumber.HasValue ?
            new ObjectParameter("pageNumber", pageNumber) :
            new ObjectParameter("pageNumber", typeof(short));


        var fetch_amountParameter = fetch_amount.HasValue ?
            new ObjectParameter("fetch_amount", fetch_amount) :
            new ObjectParameter("fetch_amount", typeof(short));


        var filter_stringParameter = filter_string != null ?
            new ObjectParameter("filter_string", filter_string) :
            new ObjectParameter("filter_string", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_pagination_Result>("sp_pagination", table_nameParameter, pageNumberParameter, fetch_amountParameter, filter_stringParameter);
    }


    public virtual int sp_request_reply(Nullable<System.Guid> accommodationID, string cell, Nullable<bool> answer)
    {

        var accommodationIDParameter = accommodationID.HasValue ?
            new ObjectParameter("accommodationID", accommodationID) :
            new ObjectParameter("accommodationID", typeof(System.Guid));


        var cellParameter = cell != null ?
            new ObjectParameter("cell", cell) :
            new ObjectParameter("cell", typeof(string));


        var answerParameter = answer.HasValue ?
            new ObjectParameter("answer", answer) :
            new ObjectParameter("answer", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_request_reply", accommodationIDParameter, cellParameter, answerParameter);
    }


    public virtual int sp_update_accommodations(Nullable<System.Guid> id, Nullable<decimal> price, Nullable<decimal> security_deposit, Nullable<short> occupancy, string gender_preference, string description, Nullable<bool> water, Nullable<bool> electricity, Nullable<bool> cable, Nullable<bool> gas, Nullable<bool> internet, Nullable<bool> availability, string terms_agreement)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(System.Guid));


        var priceParameter = price.HasValue ?
            new ObjectParameter("price", price) :
            new ObjectParameter("price", typeof(decimal));


        var security_depositParameter = security_deposit.HasValue ?
            new ObjectParameter("security_deposit", security_deposit) :
            new ObjectParameter("security_deposit", typeof(decimal));


        var occupancyParameter = occupancy.HasValue ?
            new ObjectParameter("occupancy", occupancy) :
            new ObjectParameter("occupancy", typeof(short));


        var gender_preferenceParameter = gender_preference != null ?
            new ObjectParameter("gender_preference", gender_preference) :
            new ObjectParameter("gender_preference", typeof(string));


        var descriptionParameter = description != null ?
            new ObjectParameter("description", description) :
            new ObjectParameter("description", typeof(string));


        var waterParameter = water.HasValue ?
            new ObjectParameter("water", water) :
            new ObjectParameter("water", typeof(bool));


        var electricityParameter = electricity.HasValue ?
            new ObjectParameter("electricity", electricity) :
            new ObjectParameter("electricity", typeof(bool));


        var cableParameter = cable.HasValue ?
            new ObjectParameter("cable", cable) :
            new ObjectParameter("cable", typeof(bool));


        var gasParameter = gas.HasValue ?
            new ObjectParameter("gas", gas) :
            new ObjectParameter("gas", typeof(bool));


        var internetParameter = internet.HasValue ?
            new ObjectParameter("internet", internet) :
            new ObjectParameter("internet", typeof(bool));


        var availabilityParameter = availability.HasValue ?
            new ObjectParameter("availability", availability) :
            new ObjectParameter("availability", typeof(bool));


        var terms_agreementParameter = terms_agreement != null ?
            new ObjectParameter("terms_agreement", terms_agreement) :
            new ObjectParameter("terms_agreement", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_update_accommodations", idParameter, priceParameter, security_depositParameter, occupancyParameter, gender_preferenceParameter, descriptionParameter, waterParameter, electricityParameter, cableParameter, gasParameter, internetParameter, availabilityParameter, terms_agreementParameter);
    }


    public virtual int sp_update_bill_pic_url(Nullable<System.Guid> accommodation_id, string bill_url)
    {

        var accommodation_idParameter = accommodation_id.HasValue ?
            new ObjectParameter("accommodation_id", accommodation_id) :
            new ObjectParameter("accommodation_id", typeof(System.Guid));


        var bill_urlParameter = bill_url != null ?
            new ObjectParameter("bill_url", bill_url) :
            new ObjectParameter("bill_url", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_update_bill_pic_url", accommodation_idParameter, bill_urlParameter);
    }


    public virtual int sp_update_house(Nullable<System.Guid> id, string purpose, Nullable<decimal> price, Nullable<bool> is_furnished, string description)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(System.Guid));


        var purposeParameter = purpose != null ?
            new ObjectParameter("purpose", purpose) :
            new ObjectParameter("purpose", typeof(string));


        var priceParameter = price.HasValue ?
            new ObjectParameter("price", price) :
            new ObjectParameter("price", typeof(decimal));


        var is_furnishedParameter = is_furnished.HasValue ?
            new ObjectParameter("is_furnished", is_furnished) :
            new ObjectParameter("is_furnished", typeof(bool));


        var descriptionParameter = description != null ?
            new ObjectParameter("description", description) :
            new ObjectParameter("description", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_update_house", idParameter, purposeParameter, priceParameter, is_furnishedParameter, descriptionParameter);
    }


    public virtual int sp_update_land(Nullable<System.Guid> id, string purpose, Nullable<decimal> price, string area, string description)
    {

        var idParameter = id.HasValue ?
            new ObjectParameter("id", id) :
            new ObjectParameter("id", typeof(System.Guid));


        var purposeParameter = purpose != null ?
            new ObjectParameter("purpose", purpose) :
            new ObjectParameter("purpose", typeof(string));


        var priceParameter = price.HasValue ?
            new ObjectParameter("price", price) :
            new ObjectParameter("price", typeof(decimal));


        var areaParameter = area != null ?
            new ObjectParameter("area", area) :
            new ObjectParameter("area", typeof(string));


        var descriptionParameter = description != null ?
            new ObjectParameter("description", description) :
            new ObjectParameter("description", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_update_land", idParameter, purposeParameter, priceParameter, areaParameter, descriptionParameter);
    }


    public virtual ObjectResult<Nullable<int>> sp_get_row_count(string table_name, string filter_string)
    {

        var table_nameParameter = table_name != null ?
            new ObjectParameter("table_name", table_name) :
            new ObjectParameter("table_name", typeof(string));


        var filter_stringParameter = filter_string != null ?
            new ObjectParameter("filter_string", filter_string) :
            new ObjectParameter("filter_string", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_get_row_count", table_nameParameter, filter_stringParameter);
    }


    public virtual int sp_cancel_request(Nullable<System.Guid> property_id, string cell)
    {

        var property_idParameter = property_id.HasValue ?
            new ObjectParameter("property_id", property_id) :
            new ObjectParameter("property_id", typeof(System.Guid));


        var cellParameter = cell != null ?
            new ObjectParameter("cell", cell) :
            new ObjectParameter("cell", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_cancel_request", property_idParameter, cellParameter);
    }


    public virtual int sp_remove_property(Nullable<System.Guid> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(System.Guid));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_remove_property", iDParameter);
    }


    public virtual ObjectResult<string> aspnet_AnyDataInTables(Nullable<int> tablesToCheck)
    {

        var tablesToCheckParameter = tablesToCheck.HasValue ?
            new ObjectParameter("TablesToCheck", tablesToCheck) :
            new ObjectParameter("TablesToCheck", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_AnyDataInTables", tablesToCheckParameter);
    }


    public virtual int aspnet_Applications_CreateApplication(string applicationName, ObjectParameter applicationId)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Applications_CreateApplication", applicationNameParameter, applicationId);
    }


    public virtual int aspnet_CheckSchemaVersion(string feature, string compatibleSchemaVersion)
    {

        var featureParameter = feature != null ?
            new ObjectParameter("Feature", feature) :
            new ObjectParameter("Feature", typeof(string));


        var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
            new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
            new ObjectParameter("CompatibleSchemaVersion", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_CheckSchemaVersion", featureParameter, compatibleSchemaVersionParameter);
    }


    public virtual int aspnet_Membership_ChangePasswordQuestionAndAnswer(string applicationName, string userName, string newPasswordQuestion, string newPasswordAnswer)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var newPasswordQuestionParameter = newPasswordQuestion != null ?
            new ObjectParameter("NewPasswordQuestion", newPasswordQuestion) :
            new ObjectParameter("NewPasswordQuestion", typeof(string));


        var newPasswordAnswerParameter = newPasswordAnswer != null ?
            new ObjectParameter("NewPasswordAnswer", newPasswordAnswer) :
            new ObjectParameter("NewPasswordAnswer", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_ChangePasswordQuestionAndAnswer", applicationNameParameter, userNameParameter, newPasswordQuestionParameter, newPasswordAnswerParameter);
    }


    public virtual int aspnet_Membership_CreateUser(string applicationName, string userName, string password, string passwordSalt, string email, string passwordQuestion, string passwordAnswer, Nullable<bool> isApproved, Nullable<System.DateTime> currentTimeUtc, Nullable<System.DateTime> createDate, Nullable<int> uniqueEmail, Nullable<int> passwordFormat, ObjectParameter userId)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var passwordParameter = password != null ?
            new ObjectParameter("Password", password) :
            new ObjectParameter("Password", typeof(string));


        var passwordSaltParameter = passwordSalt != null ?
            new ObjectParameter("PasswordSalt", passwordSalt) :
            new ObjectParameter("PasswordSalt", typeof(string));


        var emailParameter = email != null ?
            new ObjectParameter("Email", email) :
            new ObjectParameter("Email", typeof(string));


        var passwordQuestionParameter = passwordQuestion != null ?
            new ObjectParameter("PasswordQuestion", passwordQuestion) :
            new ObjectParameter("PasswordQuestion", typeof(string));


        var passwordAnswerParameter = passwordAnswer != null ?
            new ObjectParameter("PasswordAnswer", passwordAnswer) :
            new ObjectParameter("PasswordAnswer", typeof(string));


        var isApprovedParameter = isApproved.HasValue ?
            new ObjectParameter("IsApproved", isApproved) :
            new ObjectParameter("IsApproved", typeof(bool));


        var currentTimeUtcParameter = currentTimeUtc.HasValue ?
            new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
            new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));


        var createDateParameter = createDate.HasValue ?
            new ObjectParameter("CreateDate", createDate) :
            new ObjectParameter("CreateDate", typeof(System.DateTime));


        var uniqueEmailParameter = uniqueEmail.HasValue ?
            new ObjectParameter("UniqueEmail", uniqueEmail) :
            new ObjectParameter("UniqueEmail", typeof(int));


        var passwordFormatParameter = passwordFormat.HasValue ?
            new ObjectParameter("PasswordFormat", passwordFormat) :
            new ObjectParameter("PasswordFormat", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_CreateUser", applicationNameParameter, userNameParameter, passwordParameter, passwordSaltParameter, emailParameter, passwordQuestionParameter, passwordAnswerParameter, isApprovedParameter, currentTimeUtcParameter, createDateParameter, uniqueEmailParameter, passwordFormatParameter, userId);
    }


    public virtual int aspnet_Membership_FindUsersByEmail(string applicationName, string emailToMatch, Nullable<int> pageIndex, Nullable<int> pageSize)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var emailToMatchParameter = emailToMatch != null ?
            new ObjectParameter("EmailToMatch", emailToMatch) :
            new ObjectParameter("EmailToMatch", typeof(string));


        var pageIndexParameter = pageIndex.HasValue ?
            new ObjectParameter("PageIndex", pageIndex) :
            new ObjectParameter("PageIndex", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_FindUsersByEmail", applicationNameParameter, emailToMatchParameter, pageIndexParameter, pageSizeParameter);
    }


    public virtual int aspnet_Membership_FindUsersByName(string applicationName, string userNameToMatch, Nullable<int> pageIndex, Nullable<int> pageSize)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNameToMatchParameter = userNameToMatch != null ?
            new ObjectParameter("UserNameToMatch", userNameToMatch) :
            new ObjectParameter("UserNameToMatch", typeof(string));


        var pageIndexParameter = pageIndex.HasValue ?
            new ObjectParameter("PageIndex", pageIndex) :
            new ObjectParameter("PageIndex", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_FindUsersByName", applicationNameParameter, userNameToMatchParameter, pageIndexParameter, pageSizeParameter);
    }


    public virtual int aspnet_Membership_GetAllUsers(string applicationName, Nullable<int> pageIndex, Nullable<int> pageSize)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var pageIndexParameter = pageIndex.HasValue ?
            new ObjectParameter("PageIndex", pageIndex) :
            new ObjectParameter("PageIndex", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_GetAllUsers", applicationNameParameter, pageIndexParameter, pageSizeParameter);
    }


    public virtual int aspnet_Membership_GetNumberOfUsersOnline(string applicationName, Nullable<int> minutesSinceLastInActive, Nullable<System.DateTime> currentTimeUtc)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var minutesSinceLastInActiveParameter = minutesSinceLastInActive.HasValue ?
            new ObjectParameter("MinutesSinceLastInActive", minutesSinceLastInActive) :
            new ObjectParameter("MinutesSinceLastInActive", typeof(int));


        var currentTimeUtcParameter = currentTimeUtc.HasValue ?
            new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
            new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_GetNumberOfUsersOnline", applicationNameParameter, minutesSinceLastInActiveParameter, currentTimeUtcParameter);
    }


    public virtual ObjectResult<aspnet_Membership_GetPassword_Result> aspnet_Membership_GetPassword(string applicationName, string userName, Nullable<int> maxInvalidPasswordAttempts, Nullable<int> passwordAttemptWindow, Nullable<System.DateTime> currentTimeUtc, string passwordAnswer)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var maxInvalidPasswordAttemptsParameter = maxInvalidPasswordAttempts.HasValue ?
            new ObjectParameter("MaxInvalidPasswordAttempts", maxInvalidPasswordAttempts) :
            new ObjectParameter("MaxInvalidPasswordAttempts", typeof(int));


        var passwordAttemptWindowParameter = passwordAttemptWindow.HasValue ?
            new ObjectParameter("PasswordAttemptWindow", passwordAttemptWindow) :
            new ObjectParameter("PasswordAttemptWindow", typeof(int));


        var currentTimeUtcParameter = currentTimeUtc.HasValue ?
            new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
            new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));


        var passwordAnswerParameter = passwordAnswer != null ?
            new ObjectParameter("PasswordAnswer", passwordAnswer) :
            new ObjectParameter("PasswordAnswer", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetPassword_Result>("aspnet_Membership_GetPassword", applicationNameParameter, userNameParameter, maxInvalidPasswordAttemptsParameter, passwordAttemptWindowParameter, currentTimeUtcParameter, passwordAnswerParameter);
    }


    public virtual ObjectResult<aspnet_Membership_GetPasswordWithFormat_Result> aspnet_Membership_GetPasswordWithFormat(string applicationName, string userName, Nullable<bool> updateLastLoginActivityDate, Nullable<System.DateTime> currentTimeUtc)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var updateLastLoginActivityDateParameter = updateLastLoginActivityDate.HasValue ?
            new ObjectParameter("UpdateLastLoginActivityDate", updateLastLoginActivityDate) :
            new ObjectParameter("UpdateLastLoginActivityDate", typeof(bool));


        var currentTimeUtcParameter = currentTimeUtc.HasValue ?
            new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
            new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetPasswordWithFormat_Result>("aspnet_Membership_GetPasswordWithFormat", applicationNameParameter, userNameParameter, updateLastLoginActivityDateParameter, currentTimeUtcParameter);
    }


    public virtual ObjectResult<string> aspnet_Membership_GetUserByEmail(string applicationName, string email)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var emailParameter = email != null ?
            new ObjectParameter("Email", email) :
            new ObjectParameter("Email", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_Membership_GetUserByEmail", applicationNameParameter, emailParameter);
    }


    public virtual ObjectResult<aspnet_Membership_GetUserByName_Result> aspnet_Membership_GetUserByName(string applicationName, string userName, Nullable<System.DateTime> currentTimeUtc, Nullable<bool> updateLastActivity)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var currentTimeUtcParameter = currentTimeUtc.HasValue ?
            new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
            new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));


        var updateLastActivityParameter = updateLastActivity.HasValue ?
            new ObjectParameter("UpdateLastActivity", updateLastActivity) :
            new ObjectParameter("UpdateLastActivity", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetUserByName_Result>("aspnet_Membership_GetUserByName", applicationNameParameter, userNameParameter, currentTimeUtcParameter, updateLastActivityParameter);
    }


    public virtual ObjectResult<aspnet_Membership_GetUserByUserId_Result> aspnet_Membership_GetUserByUserId(Nullable<System.Guid> userId, Nullable<System.DateTime> currentTimeUtc, Nullable<bool> updateLastActivity)
    {

        var userIdParameter = userId.HasValue ?
            new ObjectParameter("UserId", userId) :
            new ObjectParameter("UserId", typeof(System.Guid));


        var currentTimeUtcParameter = currentTimeUtc.HasValue ?
            new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
            new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));


        var updateLastActivityParameter = updateLastActivity.HasValue ?
            new ObjectParameter("UpdateLastActivity", updateLastActivity) :
            new ObjectParameter("UpdateLastActivity", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetUserByUserId_Result>("aspnet_Membership_GetUserByUserId", userIdParameter, currentTimeUtcParameter, updateLastActivityParameter);
    }


    public virtual int aspnet_Membership_ResetPassword(string applicationName, string userName, string newPassword, Nullable<int> maxInvalidPasswordAttempts, Nullable<int> passwordAttemptWindow, string passwordSalt, Nullable<System.DateTime> currentTimeUtc, Nullable<int> passwordFormat, string passwordAnswer)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var newPasswordParameter = newPassword != null ?
            new ObjectParameter("NewPassword", newPassword) :
            new ObjectParameter("NewPassword", typeof(string));


        var maxInvalidPasswordAttemptsParameter = maxInvalidPasswordAttempts.HasValue ?
            new ObjectParameter("MaxInvalidPasswordAttempts", maxInvalidPasswordAttempts) :
            new ObjectParameter("MaxInvalidPasswordAttempts", typeof(int));


        var passwordAttemptWindowParameter = passwordAttemptWindow.HasValue ?
            new ObjectParameter("PasswordAttemptWindow", passwordAttemptWindow) :
            new ObjectParameter("PasswordAttemptWindow", typeof(int));


        var passwordSaltParameter = passwordSalt != null ?
            new ObjectParameter("PasswordSalt", passwordSalt) :
            new ObjectParameter("PasswordSalt", typeof(string));


        var currentTimeUtcParameter = currentTimeUtc.HasValue ?
            new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
            new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));


        var passwordFormatParameter = passwordFormat.HasValue ?
            new ObjectParameter("PasswordFormat", passwordFormat) :
            new ObjectParameter("PasswordFormat", typeof(int));


        var passwordAnswerParameter = passwordAnswer != null ?
            new ObjectParameter("PasswordAnswer", passwordAnswer) :
            new ObjectParameter("PasswordAnswer", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_ResetPassword", applicationNameParameter, userNameParameter, newPasswordParameter, maxInvalidPasswordAttemptsParameter, passwordAttemptWindowParameter, passwordSaltParameter, currentTimeUtcParameter, passwordFormatParameter, passwordAnswerParameter);
    }


    public virtual int aspnet_Membership_SetPassword(string applicationName, string userName, string newPassword, string passwordSalt, Nullable<System.DateTime> currentTimeUtc, Nullable<int> passwordFormat)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var newPasswordParameter = newPassword != null ?
            new ObjectParameter("NewPassword", newPassword) :
            new ObjectParameter("NewPassword", typeof(string));


        var passwordSaltParameter = passwordSalt != null ?
            new ObjectParameter("PasswordSalt", passwordSalt) :
            new ObjectParameter("PasswordSalt", typeof(string));


        var currentTimeUtcParameter = currentTimeUtc.HasValue ?
            new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
            new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));


        var passwordFormatParameter = passwordFormat.HasValue ?
            new ObjectParameter("PasswordFormat", passwordFormat) :
            new ObjectParameter("PasswordFormat", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_SetPassword", applicationNameParameter, userNameParameter, newPasswordParameter, passwordSaltParameter, currentTimeUtcParameter, passwordFormatParameter);
    }


    public virtual int aspnet_Membership_UnlockUser(string applicationName, string userName)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_UnlockUser", applicationNameParameter, userNameParameter);
    }


    public virtual int aspnet_Membership_UpdateUser(string applicationName, string userName, string email, string comment, Nullable<bool> isApproved, Nullable<System.DateTime> lastLoginDate, Nullable<System.DateTime> lastActivityDate, Nullable<int> uniqueEmail, Nullable<System.DateTime> currentTimeUtc)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var emailParameter = email != null ?
            new ObjectParameter("Email", email) :
            new ObjectParameter("Email", typeof(string));


        var commentParameter = comment != null ?
            new ObjectParameter("Comment", comment) :
            new ObjectParameter("Comment", typeof(string));


        var isApprovedParameter = isApproved.HasValue ?
            new ObjectParameter("IsApproved", isApproved) :
            new ObjectParameter("IsApproved", typeof(bool));


        var lastLoginDateParameter = lastLoginDate.HasValue ?
            new ObjectParameter("LastLoginDate", lastLoginDate) :
            new ObjectParameter("LastLoginDate", typeof(System.DateTime));


        var lastActivityDateParameter = lastActivityDate.HasValue ?
            new ObjectParameter("LastActivityDate", lastActivityDate) :
            new ObjectParameter("LastActivityDate", typeof(System.DateTime));


        var uniqueEmailParameter = uniqueEmail.HasValue ?
            new ObjectParameter("UniqueEmail", uniqueEmail) :
            new ObjectParameter("UniqueEmail", typeof(int));


        var currentTimeUtcParameter = currentTimeUtc.HasValue ?
            new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
            new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_UpdateUser", applicationNameParameter, userNameParameter, emailParameter, commentParameter, isApprovedParameter, lastLoginDateParameter, lastActivityDateParameter, uniqueEmailParameter, currentTimeUtcParameter);
    }


    public virtual int aspnet_Membership_UpdateUserInfo(string applicationName, string userName, Nullable<bool> isPasswordCorrect, Nullable<bool> updateLastLoginActivityDate, Nullable<int> maxInvalidPasswordAttempts, Nullable<int> passwordAttemptWindow, Nullable<System.DateTime> currentTimeUtc, Nullable<System.DateTime> lastLoginDate, Nullable<System.DateTime> lastActivityDate)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var isPasswordCorrectParameter = isPasswordCorrect.HasValue ?
            new ObjectParameter("IsPasswordCorrect", isPasswordCorrect) :
            new ObjectParameter("IsPasswordCorrect", typeof(bool));


        var updateLastLoginActivityDateParameter = updateLastLoginActivityDate.HasValue ?
            new ObjectParameter("UpdateLastLoginActivityDate", updateLastLoginActivityDate) :
            new ObjectParameter("UpdateLastLoginActivityDate", typeof(bool));


        var maxInvalidPasswordAttemptsParameter = maxInvalidPasswordAttempts.HasValue ?
            new ObjectParameter("MaxInvalidPasswordAttempts", maxInvalidPasswordAttempts) :
            new ObjectParameter("MaxInvalidPasswordAttempts", typeof(int));


        var passwordAttemptWindowParameter = passwordAttemptWindow.HasValue ?
            new ObjectParameter("PasswordAttemptWindow", passwordAttemptWindow) :
            new ObjectParameter("PasswordAttemptWindow", typeof(int));


        var currentTimeUtcParameter = currentTimeUtc.HasValue ?
            new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
            new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));


        var lastLoginDateParameter = lastLoginDate.HasValue ?
            new ObjectParameter("LastLoginDate", lastLoginDate) :
            new ObjectParameter("LastLoginDate", typeof(System.DateTime));


        var lastActivityDateParameter = lastActivityDate.HasValue ?
            new ObjectParameter("LastActivityDate", lastActivityDate) :
            new ObjectParameter("LastActivityDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_UpdateUserInfo", applicationNameParameter, userNameParameter, isPasswordCorrectParameter, updateLastLoginActivityDateParameter, maxInvalidPasswordAttemptsParameter, passwordAttemptWindowParameter, currentTimeUtcParameter, lastLoginDateParameter, lastActivityDateParameter);
    }


    public virtual int aspnet_Paths_CreatePath(Nullable<System.Guid> applicationId, string path, ObjectParameter pathId)
    {

        var applicationIdParameter = applicationId.HasValue ?
            new ObjectParameter("ApplicationId", applicationId) :
            new ObjectParameter("ApplicationId", typeof(System.Guid));


        var pathParameter = path != null ?
            new ObjectParameter("Path", path) :
            new ObjectParameter("Path", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Paths_CreatePath", applicationIdParameter, pathParameter, pathId);
    }


    public virtual int aspnet_Personalization_GetApplicationId(string applicationName, ObjectParameter applicationId)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Personalization_GetApplicationId", applicationNameParameter, applicationId);
    }


    public virtual int aspnet_PersonalizationAdministration_DeleteAllState(Nullable<bool> allUsersScope, string applicationName, ObjectParameter count)
    {

        var allUsersScopeParameter = allUsersScope.HasValue ?
            new ObjectParameter("AllUsersScope", allUsersScope) :
            new ObjectParameter("AllUsersScope", typeof(bool));


        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_DeleteAllState", allUsersScopeParameter, applicationNameParameter, count);
    }


    public virtual int aspnet_PersonalizationAdministration_FindState(Nullable<bool> allUsersScope, string applicationName, Nullable<int> pageIndex, Nullable<int> pageSize, string path, string userName, Nullable<System.DateTime> inactiveSinceDate)
    {

        var allUsersScopeParameter = allUsersScope.HasValue ?
            new ObjectParameter("AllUsersScope", allUsersScope) :
            new ObjectParameter("AllUsersScope", typeof(bool));


        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var pageIndexParameter = pageIndex.HasValue ?
            new ObjectParameter("PageIndex", pageIndex) :
            new ObjectParameter("PageIndex", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        var pathParameter = path != null ?
            new ObjectParameter("Path", path) :
            new ObjectParameter("Path", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
            new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
            new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_FindState", allUsersScopeParameter, applicationNameParameter, pageIndexParameter, pageSizeParameter, pathParameter, userNameParameter, inactiveSinceDateParameter);
    }


    public virtual int aspnet_PersonalizationAdministration_GetCountOfState(ObjectParameter count, Nullable<bool> allUsersScope, string applicationName, string path, string userName, Nullable<System.DateTime> inactiveSinceDate)
    {

        var allUsersScopeParameter = allUsersScope.HasValue ?
            new ObjectParameter("AllUsersScope", allUsersScope) :
            new ObjectParameter("AllUsersScope", typeof(bool));


        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var pathParameter = path != null ?
            new ObjectParameter("Path", path) :
            new ObjectParameter("Path", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
            new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
            new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_GetCountOfState", count, allUsersScopeParameter, applicationNameParameter, pathParameter, userNameParameter, inactiveSinceDateParameter);
    }


    public virtual int aspnet_PersonalizationAdministration_ResetSharedState(ObjectParameter count, string applicationName, string path)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var pathParameter = path != null ?
            new ObjectParameter("Path", path) :
            new ObjectParameter("Path", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_ResetSharedState", count, applicationNameParameter, pathParameter);
    }


    public virtual int aspnet_PersonalizationAdministration_ResetUserState(ObjectParameter count, string applicationName, Nullable<System.DateTime> inactiveSinceDate, string userName, string path)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
            new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
            new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var pathParameter = path != null ?
            new ObjectParameter("Path", path) :
            new ObjectParameter("Path", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_ResetUserState", count, applicationNameParameter, inactiveSinceDateParameter, userNameParameter, pathParameter);
    }


    public virtual ObjectResult<byte[]> aspnet_PersonalizationAllUsers_GetPageSettings(string applicationName, string path)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var pathParameter = path != null ?
            new ObjectParameter("Path", path) :
            new ObjectParameter("Path", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("aspnet_PersonalizationAllUsers_GetPageSettings", applicationNameParameter, pathParameter);
    }


    public virtual int aspnet_PersonalizationAllUsers_ResetPageSettings(string applicationName, string path)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var pathParameter = path != null ?
            new ObjectParameter("Path", path) :
            new ObjectParameter("Path", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAllUsers_ResetPageSettings", applicationNameParameter, pathParameter);
    }


    public virtual int aspnet_PersonalizationAllUsers_SetPageSettings(string applicationName, string path, byte[] pageSettings, Nullable<System.DateTime> currentTimeUtc)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var pathParameter = path != null ?
            new ObjectParameter("Path", path) :
            new ObjectParameter("Path", typeof(string));


        var pageSettingsParameter = pageSettings != null ?
            new ObjectParameter("PageSettings", pageSettings) :
            new ObjectParameter("PageSettings", typeof(byte[]));


        var currentTimeUtcParameter = currentTimeUtc.HasValue ?
            new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
            new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAllUsers_SetPageSettings", applicationNameParameter, pathParameter, pageSettingsParameter, currentTimeUtcParameter);
    }


    public virtual ObjectResult<byte[]> aspnet_PersonalizationPerUser_GetPageSettings(string applicationName, string userName, string path, Nullable<System.DateTime> currentTimeUtc)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var pathParameter = path != null ?
            new ObjectParameter("Path", path) :
            new ObjectParameter("Path", typeof(string));


        var currentTimeUtcParameter = currentTimeUtc.HasValue ?
            new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
            new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("aspnet_PersonalizationPerUser_GetPageSettings", applicationNameParameter, userNameParameter, pathParameter, currentTimeUtcParameter);
    }


    public virtual int aspnet_PersonalizationPerUser_ResetPageSettings(string applicationName, string userName, string path, Nullable<System.DateTime> currentTimeUtc)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var pathParameter = path != null ?
            new ObjectParameter("Path", path) :
            new ObjectParameter("Path", typeof(string));


        var currentTimeUtcParameter = currentTimeUtc.HasValue ?
            new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
            new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationPerUser_ResetPageSettings", applicationNameParameter, userNameParameter, pathParameter, currentTimeUtcParameter);
    }


    public virtual int aspnet_PersonalizationPerUser_SetPageSettings(string applicationName, string userName, string path, byte[] pageSettings, Nullable<System.DateTime> currentTimeUtc)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var pathParameter = path != null ?
            new ObjectParameter("Path", path) :
            new ObjectParameter("Path", typeof(string));


        var pageSettingsParameter = pageSettings != null ?
            new ObjectParameter("PageSettings", pageSettings) :
            new ObjectParameter("PageSettings", typeof(byte[]));


        var currentTimeUtcParameter = currentTimeUtc.HasValue ?
            new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
            new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationPerUser_SetPageSettings", applicationNameParameter, userNameParameter, pathParameter, pageSettingsParameter, currentTimeUtcParameter);
    }


    public virtual ObjectResult<Nullable<int>> aspnet_Profile_DeleteInactiveProfiles(string applicationName, Nullable<int> profileAuthOptions, Nullable<System.DateTime> inactiveSinceDate)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var profileAuthOptionsParameter = profileAuthOptions.HasValue ?
            new ObjectParameter("ProfileAuthOptions", profileAuthOptions) :
            new ObjectParameter("ProfileAuthOptions", typeof(int));


        var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
            new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
            new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("aspnet_Profile_DeleteInactiveProfiles", applicationNameParameter, profileAuthOptionsParameter, inactiveSinceDateParameter);
    }


    public virtual ObjectResult<Nullable<int>> aspnet_Profile_DeleteProfiles(string applicationName, string userNames)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNamesParameter = userNames != null ?
            new ObjectParameter("UserNames", userNames) :
            new ObjectParameter("UserNames", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("aspnet_Profile_DeleteProfiles", applicationNameParameter, userNamesParameter);
    }


    public virtual ObjectResult<Nullable<int>> aspnet_Profile_GetNumberOfInactiveProfiles(string applicationName, Nullable<int> profileAuthOptions, Nullable<System.DateTime> inactiveSinceDate)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var profileAuthOptionsParameter = profileAuthOptions.HasValue ?
            new ObjectParameter("ProfileAuthOptions", profileAuthOptions) :
            new ObjectParameter("ProfileAuthOptions", typeof(int));


        var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
            new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
            new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("aspnet_Profile_GetNumberOfInactiveProfiles", applicationNameParameter, profileAuthOptionsParameter, inactiveSinceDateParameter);
    }


    public virtual int aspnet_Profile_GetProfiles(string applicationName, Nullable<int> profileAuthOptions, Nullable<int> pageIndex, Nullable<int> pageSize, string userNameToMatch, Nullable<System.DateTime> inactiveSinceDate)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var profileAuthOptionsParameter = profileAuthOptions.HasValue ?
            new ObjectParameter("ProfileAuthOptions", profileAuthOptions) :
            new ObjectParameter("ProfileAuthOptions", typeof(int));


        var pageIndexParameter = pageIndex.HasValue ?
            new ObjectParameter("PageIndex", pageIndex) :
            new ObjectParameter("PageIndex", typeof(int));


        var pageSizeParameter = pageSize.HasValue ?
            new ObjectParameter("PageSize", pageSize) :
            new ObjectParameter("PageSize", typeof(int));


        var userNameToMatchParameter = userNameToMatch != null ?
            new ObjectParameter("UserNameToMatch", userNameToMatch) :
            new ObjectParameter("UserNameToMatch", typeof(string));


        var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
            new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
            new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Profile_GetProfiles", applicationNameParameter, profileAuthOptionsParameter, pageIndexParameter, pageSizeParameter, userNameToMatchParameter, inactiveSinceDateParameter);
    }


    public virtual ObjectResult<aspnet_Profile_GetProperties_Result> aspnet_Profile_GetProperties(string applicationName, string userName, Nullable<System.DateTime> currentTimeUtc)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var currentTimeUtcParameter = currentTimeUtc.HasValue ?
            new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
            new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Profile_GetProperties_Result>("aspnet_Profile_GetProperties", applicationNameParameter, userNameParameter, currentTimeUtcParameter);
    }


    public virtual int aspnet_Profile_SetProperties(string applicationName, string propertyNames, string propertyValuesString, byte[] propertyValuesBinary, string userName, Nullable<bool> isUserAnonymous, Nullable<System.DateTime> currentTimeUtc)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var propertyNamesParameter = propertyNames != null ?
            new ObjectParameter("PropertyNames", propertyNames) :
            new ObjectParameter("PropertyNames", typeof(string));


        var propertyValuesStringParameter = propertyValuesString != null ?
            new ObjectParameter("PropertyValuesString", propertyValuesString) :
            new ObjectParameter("PropertyValuesString", typeof(string));


        var propertyValuesBinaryParameter = propertyValuesBinary != null ?
            new ObjectParameter("PropertyValuesBinary", propertyValuesBinary) :
            new ObjectParameter("PropertyValuesBinary", typeof(byte[]));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var isUserAnonymousParameter = isUserAnonymous.HasValue ?
            new ObjectParameter("IsUserAnonymous", isUserAnonymous) :
            new ObjectParameter("IsUserAnonymous", typeof(bool));


        var currentTimeUtcParameter = currentTimeUtc.HasValue ?
            new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
            new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Profile_SetProperties", applicationNameParameter, propertyNamesParameter, propertyValuesStringParameter, propertyValuesBinaryParameter, userNameParameter, isUserAnonymousParameter, currentTimeUtcParameter);
    }


    public virtual int aspnet_RegisterSchemaVersion(string feature, string compatibleSchemaVersion, Nullable<bool> isCurrentVersion, Nullable<bool> removeIncompatibleSchema)
    {

        var featureParameter = feature != null ?
            new ObjectParameter("Feature", feature) :
            new ObjectParameter("Feature", typeof(string));


        var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
            new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
            new ObjectParameter("CompatibleSchemaVersion", typeof(string));


        var isCurrentVersionParameter = isCurrentVersion.HasValue ?
            new ObjectParameter("IsCurrentVersion", isCurrentVersion) :
            new ObjectParameter("IsCurrentVersion", typeof(bool));


        var removeIncompatibleSchemaParameter = removeIncompatibleSchema.HasValue ?
            new ObjectParameter("RemoveIncompatibleSchema", removeIncompatibleSchema) :
            new ObjectParameter("RemoveIncompatibleSchema", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_RegisterSchemaVersion", featureParameter, compatibleSchemaVersionParameter, isCurrentVersionParameter, removeIncompatibleSchemaParameter);
    }


    public virtual int aspnet_Roles_CreateRole(string applicationName, string roleName)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var roleNameParameter = roleName != null ?
            new ObjectParameter("RoleName", roleName) :
            new ObjectParameter("RoleName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Roles_CreateRole", applicationNameParameter, roleNameParameter);
    }


    public virtual int aspnet_Roles_DeleteRole(string applicationName, string roleName, Nullable<bool> deleteOnlyIfRoleIsEmpty)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var roleNameParameter = roleName != null ?
            new ObjectParameter("RoleName", roleName) :
            new ObjectParameter("RoleName", typeof(string));


        var deleteOnlyIfRoleIsEmptyParameter = deleteOnlyIfRoleIsEmpty.HasValue ?
            new ObjectParameter("DeleteOnlyIfRoleIsEmpty", deleteOnlyIfRoleIsEmpty) :
            new ObjectParameter("DeleteOnlyIfRoleIsEmpty", typeof(bool));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Roles_DeleteRole", applicationNameParameter, roleNameParameter, deleteOnlyIfRoleIsEmptyParameter);
    }


    public virtual ObjectResult<string> aspnet_Roles_GetAllRoles(string applicationName)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_Roles_GetAllRoles", applicationNameParameter);
    }


    public virtual int aspnet_Roles_RoleExists(string applicationName, string roleName)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var roleNameParameter = roleName != null ?
            new ObjectParameter("RoleName", roleName) :
            new ObjectParameter("RoleName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Roles_RoleExists", applicationNameParameter, roleNameParameter);
    }


    public virtual int aspnet_Setup_RemoveAllRoleMembers(string name)
    {

        var nameParameter = name != null ?
            new ObjectParameter("name", name) :
            new ObjectParameter("name", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Setup_RemoveAllRoleMembers", nameParameter);
    }


    public virtual int aspnet_Setup_RestorePermissions(string name)
    {

        var nameParameter = name != null ?
            new ObjectParameter("name", name) :
            new ObjectParameter("name", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Setup_RestorePermissions", nameParameter);
    }


    public virtual int aspnet_UnRegisterSchemaVersion(string feature, string compatibleSchemaVersion)
    {

        var featureParameter = feature != null ?
            new ObjectParameter("Feature", feature) :
            new ObjectParameter("Feature", typeof(string));


        var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
            new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
            new ObjectParameter("CompatibleSchemaVersion", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_UnRegisterSchemaVersion", featureParameter, compatibleSchemaVersionParameter);
    }


    public virtual int aspnet_Users_CreateUser(Nullable<System.Guid> applicationId, string userName, Nullable<bool> isUserAnonymous, Nullable<System.DateTime> lastActivityDate, ObjectParameter userId)
    {

        var applicationIdParameter = applicationId.HasValue ?
            new ObjectParameter("ApplicationId", applicationId) :
            new ObjectParameter("ApplicationId", typeof(System.Guid));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var isUserAnonymousParameter = isUserAnonymous.HasValue ?
            new ObjectParameter("IsUserAnonymous", isUserAnonymous) :
            new ObjectParameter("IsUserAnonymous", typeof(bool));


        var lastActivityDateParameter = lastActivityDate.HasValue ?
            new ObjectParameter("LastActivityDate", lastActivityDate) :
            new ObjectParameter("LastActivityDate", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Users_CreateUser", applicationIdParameter, userNameParameter, isUserAnonymousParameter, lastActivityDateParameter, userId);
    }


    public virtual int aspnet_Users_DeleteUser(string applicationName, string userName, Nullable<int> tablesToDeleteFrom, ObjectParameter numTablesDeletedFrom)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var tablesToDeleteFromParameter = tablesToDeleteFrom.HasValue ?
            new ObjectParameter("TablesToDeleteFrom", tablesToDeleteFrom) :
            new ObjectParameter("TablesToDeleteFrom", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Users_DeleteUser", applicationNameParameter, userNameParameter, tablesToDeleteFromParameter, numTablesDeletedFrom);
    }


    public virtual ObjectResult<string> aspnet_UsersInRoles_AddUsersToRoles(string applicationName, string userNames, string roleNames, Nullable<System.DateTime> currentTimeUtc)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNamesParameter = userNames != null ?
            new ObjectParameter("UserNames", userNames) :
            new ObjectParameter("UserNames", typeof(string));


        var roleNamesParameter = roleNames != null ?
            new ObjectParameter("RoleNames", roleNames) :
            new ObjectParameter("RoleNames", typeof(string));


        var currentTimeUtcParameter = currentTimeUtc.HasValue ?
            new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
            new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_AddUsersToRoles", applicationNameParameter, userNamesParameter, roleNamesParameter, currentTimeUtcParameter);
    }


    public virtual ObjectResult<string> aspnet_UsersInRoles_FindUsersInRole(string applicationName, string roleName, string userNameToMatch)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var roleNameParameter = roleName != null ?
            new ObjectParameter("RoleName", roleName) :
            new ObjectParameter("RoleName", typeof(string));


        var userNameToMatchParameter = userNameToMatch != null ?
            new ObjectParameter("UserNameToMatch", userNameToMatch) :
            new ObjectParameter("UserNameToMatch", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_FindUsersInRole", applicationNameParameter, roleNameParameter, userNameToMatchParameter);
    }


    public virtual ObjectResult<string> aspnet_UsersInRoles_GetRolesForUser(string applicationName, string userName)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_GetRolesForUser", applicationNameParameter, userNameParameter);
    }


    public virtual ObjectResult<string> aspnet_UsersInRoles_GetUsersInRoles(string applicationName, string roleName)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var roleNameParameter = roleName != null ?
            new ObjectParameter("RoleName", roleName) :
            new ObjectParameter("RoleName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_GetUsersInRoles", applicationNameParameter, roleNameParameter);
    }


    public virtual int aspnet_UsersInRoles_IsUserInRole(string applicationName, string userName, string roleName)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNameParameter = userName != null ?
            new ObjectParameter("UserName", userName) :
            new ObjectParameter("UserName", typeof(string));


        var roleNameParameter = roleName != null ?
            new ObjectParameter("RoleName", roleName) :
            new ObjectParameter("RoleName", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_UsersInRoles_IsUserInRole", applicationNameParameter, userNameParameter, roleNameParameter);
    }


    public virtual ObjectResult<aspnet_UsersInRoles_RemoveUsersFromRoles_Result> aspnet_UsersInRoles_RemoveUsersFromRoles(string applicationName, string userNames, string roleNames)
    {

        var applicationNameParameter = applicationName != null ?
            new ObjectParameter("ApplicationName", applicationName) :
            new ObjectParameter("ApplicationName", typeof(string));


        var userNamesParameter = userNames != null ?
            new ObjectParameter("UserNames", userNames) :
            new ObjectParameter("UserNames", typeof(string));


        var roleNamesParameter = roleNames != null ?
            new ObjectParameter("RoleNames", roleNames) :
            new ObjectParameter("RoleNames", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_UsersInRoles_RemoveUsersFromRoles_Result>("aspnet_UsersInRoles_RemoveUsersFromRoles", applicationNameParameter, userNamesParameter, roleNamesParameter);
    }


    public virtual int aspnet_WebEvent_LogEvent(string eventId, Nullable<System.DateTime> eventTimeUtc, Nullable<System.DateTime> eventTime, string eventType, Nullable<decimal> eventSequence, Nullable<decimal> eventOccurrence, Nullable<int> eventCode, Nullable<int> eventDetailCode, string message, string applicationPath, string applicationVirtualPath, string machineName, string requestUrl, string exceptionType, string details)
    {

        var eventIdParameter = eventId != null ?
            new ObjectParameter("EventId", eventId) :
            new ObjectParameter("EventId", typeof(string));


        var eventTimeUtcParameter = eventTimeUtc.HasValue ?
            new ObjectParameter("EventTimeUtc", eventTimeUtc) :
            new ObjectParameter("EventTimeUtc", typeof(System.DateTime));


        var eventTimeParameter = eventTime.HasValue ?
            new ObjectParameter("EventTime", eventTime) :
            new ObjectParameter("EventTime", typeof(System.DateTime));


        var eventTypeParameter = eventType != null ?
            new ObjectParameter("EventType", eventType) :
            new ObjectParameter("EventType", typeof(string));


        var eventSequenceParameter = eventSequence.HasValue ?
            new ObjectParameter("EventSequence", eventSequence) :
            new ObjectParameter("EventSequence", typeof(decimal));


        var eventOccurrenceParameter = eventOccurrence.HasValue ?
            new ObjectParameter("EventOccurrence", eventOccurrence) :
            new ObjectParameter("EventOccurrence", typeof(decimal));


        var eventCodeParameter = eventCode.HasValue ?
            new ObjectParameter("EventCode", eventCode) :
            new ObjectParameter("EventCode", typeof(int));


        var eventDetailCodeParameter = eventDetailCode.HasValue ?
            new ObjectParameter("EventDetailCode", eventDetailCode) :
            new ObjectParameter("EventDetailCode", typeof(int));


        var messageParameter = message != null ?
            new ObjectParameter("Message", message) :
            new ObjectParameter("Message", typeof(string));


        var applicationPathParameter = applicationPath != null ?
            new ObjectParameter("ApplicationPath", applicationPath) :
            new ObjectParameter("ApplicationPath", typeof(string));


        var applicationVirtualPathParameter = applicationVirtualPath != null ?
            new ObjectParameter("ApplicationVirtualPath", applicationVirtualPath) :
            new ObjectParameter("ApplicationVirtualPath", typeof(string));


        var machineNameParameter = machineName != null ?
            new ObjectParameter("MachineName", machineName) :
            new ObjectParameter("MachineName", typeof(string));


        var requestUrlParameter = requestUrl != null ?
            new ObjectParameter("RequestUrl", requestUrl) :
            new ObjectParameter("RequestUrl", typeof(string));


        var exceptionTypeParameter = exceptionType != null ?
            new ObjectParameter("ExceptionType", exceptionType) :
            new ObjectParameter("ExceptionType", typeof(string));


        var detailsParameter = details != null ?
            new ObjectParameter("Details", details) :
            new ObjectParameter("Details", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_WebEvent_LogEvent", eventIdParameter, eventTimeUtcParameter, eventTimeParameter, eventTypeParameter, eventSequenceParameter, eventOccurrenceParameter, eventCodeParameter, eventDetailCodeParameter, messageParameter, applicationPathParameter, applicationVirtualPathParameter, machineNameParameter, requestUrlParameter, exceptionTypeParameter, detailsParameter);
    }


    public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        var versionParameter = version.HasValue ?
            new ObjectParameter("version", version) :
            new ObjectParameter("version", typeof(int));


        var definitionParameter = definition != null ?
            new ObjectParameter("definition", definition) :
            new ObjectParameter("definition", typeof(byte[]));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
    }


    public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        var versionParameter = version.HasValue ?
            new ObjectParameter("version", version) :
            new ObjectParameter("version", typeof(int));


        var definitionParameter = definition != null ?
            new ObjectParameter("definition", definition) :
            new ObjectParameter("definition", typeof(byte[]));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
    }


    public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
    }


    public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
    }


    public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
    }


    public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        var new_diagramnameParameter = new_diagramname != null ?
            new ObjectParameter("new_diagramname", new_diagramname) :
            new ObjectParameter("new_diagramname", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
    }


    public virtual int sp_upgraddiagrams()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
    }

}

}

